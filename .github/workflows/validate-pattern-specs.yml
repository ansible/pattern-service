---
name: Validate Pattern Specs

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  validate-pattern-specs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout main branch
        run: |
          git fetch origin main:main

      - name: Get changed files
        id: changed-files
        run: |
          BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          HEAD_COMMIT=${{ github.event.pull_request.head.sha }}
          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT..$HEAD_COMMIT)

          # Check for pattern specification files (excluding dev versions)
          SPEC_FILES=$(echo "$CHANGED_FILES" | grep -E '^specifications/pattern-specification/.*\.md$' | grep -v 'dev\.md$' || true)
          echo "spec_files<<EOF" >> $GITHUB_OUTPUT
          echo "$SPEC_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for pattern schema files (excluding dev versions)
          SCHEMA_FILES=$(echo "$CHANGED_FILES" | grep -E '^specifications/pattern-schema/.*\.json$' | grep -v 'dev\.json$' || true)
          echo "schema_files<<EOF" >> $GITHUB_OUTPUT
          echo "$SCHEMA_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for new specification files that don't exist on main branch
          NEW_SPEC_FILES=""
          if [ -n "$SPEC_FILES" ]; then
            echo "$SPEC_FILES" | while read -r file; do
              if [ -n "$file" ]; then
                if ! git show main:$file >/dev/null 2>&1; then
                  echo "$file"
                fi
              fi
            done > /tmp/new_spec_files.txt
            NEW_SPEC_FILES=$(cat /tmp/new_spec_files.txt 2>/dev/null || true)
          fi
          echo "new_spec_files<<EOF" >> $GITHUB_OUTPUT
          echo "$NEW_SPEC_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for new schema files that don't exist on main branch
          NEW_SCHEMA_FILES=""
          if [ -n "$SCHEMA_FILES" ]; then
            echo "$SCHEMA_FILES" | while read -r file; do
              if [ -n "$file" ]; then
                if ! git show main:$file >/dev/null 2>&1; then
                  echo "$file"
                fi
              fi
            done > /tmp/new_schema_files.txt
            NEW_SCHEMA_FILES=$(cat /tmp/new_schema_files.txt 2>/dev/null || true)
          fi
          echo "new_schema_files<<EOF" >> $GITHUB_OUTPUT
          echo "$NEW_SCHEMA_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate pattern specification files
        if: steps.changed-files.outputs.spec_files != ''
        run: |
          SPEC_FILES="${{ steps.changed-files.outputs.spec_files }}"
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              # Check if file exists in main branch
              if git show main:$file >/dev/null 2>&1; then
                # Compare with main branch - fail if different
                if ! git diff --quiet main:$file HEAD:$file; then
                  echo "::error::Pattern specification file $file differs from main branch"
                  exit 1
                fi
              else
                # New specification file - validate version consistency
                # Extract version once
                FILENAME_VERSION=$(echo "$file" | sed -n 's/.*pattern-specification-\([^/]*\)\.md/\1/p')
                FILE_VERSION=$(git show HEAD:$file | sed -n 's/^version:[[:space:]]*\([^[:space:]]*\).*/\1/p' | head -1)

                # Validate filename vs content version
                if [ "$FILENAME_VERSION" != "$FILE_VERSION" ]; then
                  echo "::error::Specification file name does not match the specification version. Expected: $FILENAME_VERSION, Got: $FILE_VERSION"
                  exit 1
                fi

                # Validate latest file points to new version
                LATEST_VERSION=$(git show HEAD:specifications/pattern-specification/pattern-specification-latest.md | sed -n 's/^version:[[:space:]]*\([^[:space:]]*\).*/\1/p' | head -1)
                if [ "$LATEST_VERSION" != "$FILENAME_VERSION" ]; then
                  echo "::error::Latest version of pattern specification does not point to the latest numeric version. Expected: $LATEST_VERSION, Got: $FILENAME_VERSION"
                  exit 1
                fi
              fi
            fi
          done <<< "$SPEC_FILES"

      - name: Validate pattern schema files
        if: steps.changed-files.outputs.schema_files != ''
        run: |
          echo "=== DEBUG: Starting schema validation ==="
          echo "Current working directory: $(pwd)"
          echo "Git HEAD: $(git rev-parse HEAD)"
          echo "Git status:"
          git status
          echo "=== END DEBUG ==="

          SCHEMA_FILES="${{ steps.changed-files.outputs.schema_files }}"
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              # Extract version from filename
              VERSION=$(echo "$file" | sed -n 's/.*pattern-schema-\([^/]*\)\.json/\1/p')

              if [ -n "$VERSION" ]; then
                # Construct expected ID once
                EXPECTED_ID="https://raw.githubusercontent.com/ansible/pattern-service/main/specifications/pattern-schema/pattern-schema-${VERSION}.json"
                # Validate new schema file's $id field
                ACTUAL_ID=$(git show HEAD:$file | jq -r '.["$id"] // empty')
                if [ "$ACTUAL_ID" != "$EXPECTED_ID" ]; then
                  echo "::error::Schema file $file has incorrect \$id field. Expected: $EXPECTED_ID, Got: $ACTUAL_ID"
                  exit 1
                fi

                # Validate latest schema file points to new version
                LATEST_ID=$(git show HEAD:specifications/pattern-schema/pattern-schema-latest.json | jq -r '.["$id"] // empty')
                if [ "$LATEST_ID" != "$EXPECTED_ID" ]; then
                  echo "::error::Latest schema file was not updated to point to new version $VERSION. Expected \$id: $EXPECTED_ID, Got: $LATEST_ID"
                  exit 1
                fi
                echo "DEBUG: VERSION = $VERSION"
                echo "DEBUG: EXPECTED_ID = $EXPECTED_ID"
                echo "DEBUG: LATEST_ID = $LATEST_ID"
                echo "DEBUG: ACTUAL_ID = $ACTUAL_ID"

              fi
            fi
          done <<< "$SCHEMA_FILES"
